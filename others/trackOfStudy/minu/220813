220813 공부기록
*드림코딩 Git 강의(복습)
 - git-scm.com/docs 에서 명령어 참고
 - 기본 branch = master 
 - 삭제 rm -rf .git(cli)
 - 명령어 축약시키기 git config --global alias.st status
 - workflow 
 -> working directory / staging area / .git directory // 로컬
 로컬에만 정보가 있으면 컴퓨터에 문제가 생길 경우,
 정보를 다 잃을 수 있으므로 Github와 같은 서버에 push하여 저장&관리
 - git add *.txt // 변경된 .txt 확장자 모두 staging에 등록
 - git rm --chached * // stating area에 등록된 파일들을 모두 제거
 => 다시금, working directory 내 untracked files로 만드는 것
 - git add . <-> git add * (삭제된 파일 포함 x)
 - echo (파일 새로 만들기 및 타이핑 추가) *.log > .gitignore // ~.log 확장자를 .gitignore 에 등록
 - git diff --global -e 실행, 
 .gitconfig 설정 변경하기,
 git difftool 실행으로 변경 사항 확인가능
 - code . // 터미널에서 vscode 열기(path 설정된 에디터)
 - git commit 에서 Title 과 Description을 추가
 - git log // 히스토리 확인 가능
 - git commit -am "~~" // 스테이징 area에 모든(all) 내용을 커밋
 **각 커밋에는 커밋 제목에만 해당하는 내용만 업데이트 할 것
 **ex) Fix crashing on login module 이라는 타이틀의 커밋에
 another bug fix, refactoring 등의 내용이 들어가면 XXX

++ version 별로 배포 및 관리하는 영상 따로 시청 필요
++ 깃허브 액션 영상(드림코딩) // 테스트 및 업로드 자동화(CI/CD) - https://www.youtube.com/watch?v=iLqGzEkusIw&ab_channel=%EB%93%9C%EB%A6%BC%EC%BD%94%EB%94%A9
// conflicts 관련 이야기

++ 디버깅 - 드림코딩(https://www.youtube.com/watch?v=IwC-BVM2_YQ&ab_channel=%EB%93%9C%EB%A6%BC%EC%BD%94%EB%94%A9)
; 문제(오류)를 찾아 해결하는 과정
// defining the problem 것이 key
// 디버깅(개발중) <-> 배포 
// 코딩 시간의 80%는 디버깅에 사용

- debugger 사용 -> break point 설정

* Callback, Promise, Async, Await 복습 예정
https://www.youtube.com/watch?v=s1vpVCrT8f4&t=684s&ab_channel=%EB%93%9C%EB%A6%BC%EC%BD%94%EB%94%A9 // callback
https://www.youtube.com/watch?v=JB_yU6Oe2eE&ab_channel=%EB%93%9C%EB%A6%BC%EC%BD%94%EB%94%A9 // promise
https://www.youtube.com/watch?v=aoQSOZfz3vQ&t=15s // async, await
